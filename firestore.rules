rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidAge(age) {
      return age is int && age >= 18 && age <= 99;
    }
    
    function isValidGender(gender) {
      return gender is string && gender in ['male', 'female', 'non-binary', 'other', 'prefer-not-to-say'];
    }
    
    function isValidEmail(email) {
      return email is string && email.size() > 0 && email.size() <= 254;
    }
    
    function hasValidStringField(data, field, minLength, maxLength) {
      return field in data && 
             data[field] is string && 
             data[field].size() >= minLength && 
             data[field].size() <= maxLength;
    }
    
    function hasValidPreferences(data) {
      return data.preferences == null || (
        data.preferences.keys().hasAll(['interestedIn', 'location', 'maxDistance', 'ageRange']) &&
        data.preferences.interestedIn.keys().hasAll(['value', 'dealbreaker']) &&
        data.preferences.location.keys().hasAll(['value', 'dealbreaker']) &&
        data.preferences.maxDistance.keys().hasAll(['value', 'unit', 'dealbreaker']) &&
        data.preferences.ageRange.keys().hasAll(['min', 'max', 'dealbreaker'])
      );
    }
    
    function isValidProfileData(data) {
      return (
        // Required fields validation
        ('displayName' in data && data.displayName is string && data.displayName.size() >= 2 && data.displayName.size() <= 50) ||
        ('name' in data && data.name is string && data.name.size() >= 2 && data.name.size() <= 50)
      ) &&
      // Gender validation
      ('gender' in data ? isValidGender(data.gender) : true) &&
      // Age validation (if present)
      ('age' in data ? isValidAge(data.age) : true) &&
      // Bio validation (if present)
      ('bio' in data ? (data.bio is string && data.bio.size() <= 500) : true) &&
      // Photos validation (if present)
      ('photos' in data ? (data.photos is list && data.photos.size() <= 10) : true) &&
      // Prompts validation (if present)
      ('prompts' in data ? (data.prompts is list && data.prompts.size() <= 10) : true);
    }
    
    function isValidChatParticipants(participants) {
      return participants is list && 
             participants.size() == 2 && 
             request.auth.uid in participants;
    }
    
    function isValidLikeData(data) {
      return data.fromUserId == request.auth.uid &&
             data.toUserId is string &&
             data.fromUserId != data.toUserId &&
             data.status in ['pending', 'matched', 'dismissed'];
    }
    
    function isValidMatchData(data) {
      return (data.user1Id == request.auth.uid || data.user2Id == request.auth.uid) &&
             data.user1Id != data.user2Id;
    }
    
    function isValidDislikeData(data) {
      return data.fromUserId == request.auth.uid &&
             data.toUserId is string &&
             data.fromUserId != data.toUserId;
    }
    
    function isValidMessageData(data) {
      return data.senderId == request.auth.uid &&
             data.content is string &&
             data.content.size() <= 1000 &&
             data.type in ['text', 'image', 'video', 'audio'] &&
             ('mediaUrl' in data ? data.mediaUrl is string : true);
    }
    
    // Users collection (legacy - should migrate to profiles)
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) && 
                     isValidProfileData(request.resource.data) &&
                     hasValidPreferences(request.resource.data);
      allow update: if isOwner(userId) && 
                     isValidProfileData(request.resource.data) &&
                     hasValidPreferences(request.resource.data);
      allow delete: if false; // Prevent data loss
    }
    
    // Profiles collection (main user data)
    match /profiles/{profileId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(profileId) && 
                     isValidProfileData(request.resource.data) &&
                     hasValidPreferences(request.resource.data);
      allow update: if isOwner(profileId) && 
                     isValidProfileData(request.resource.data) &&
                     hasValidPreferences(request.resource.data);
      allow delete: if isOwner(profileId);
    }
    
    // Chats collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid in resource.data.participantIds);
      allow create: if isAuthenticated() && 
        (request.auth.uid in request.resource.data.participantIds) &&
        isValidChatParticipants(request.resource.data.participantIds);
      allow update: if isAuthenticated() && 
        (request.auth.uid in resource.data.participantIds) &&
        ('lastMessage' in request.resource.data ? true : true); // Allow lastMessage updates
      allow delete: if false;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds);
        allow create: if isAuthenticated() && 
          isValidMessageData(request.resource.data) &&
          (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds);
        allow update: if isAuthenticated() && 
          (request.auth.uid == resource.data.senderId ||
           ('status' in request.resource.data && request.resource.data.status in ['read', 'delivered']) ||
           ('reactions' in request.resource.data && 'readBy' in request.resource.data));
        allow delete: if false;
      }
    }
    
    // Likes collection
    match /likes/{likeId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
      allow create: if isAuthenticated() && 
        isValidLikeData(request.resource.data);
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.toUserId || 
         request.auth.uid == resource.data.fromUserId) &&
        ('status' in request.resource.data ? 
         request.resource.data.status in ['matched', 'dismissed'] : true);
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
    }
    
    // Dislikes collection
    match /dislikes/{dislikeId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.fromUserId);
      allow create: if isAuthenticated() && 
        isValidDislikeData(request.resource.data);
      allow update: if false; // Dislikes are immutable once created
      allow delete: if false; // Dislikes are permanent for user safety
    }
    
    // Matches collection
    match /matches/{matchId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.user1Id || request.auth.uid == resource.data.user2Id);
      allow create: if isAuthenticated() && 
        isValidMatchData(request.resource.data);
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.user1Id || request.auth.uid == resource.data.user2Id) &&
        ('lastActivity' in request.resource.data ? true : true); // Allow lastActivity updates
      allow delete: if false;
    }
    
    // Security events collection (admin only)
    match /security_events/{eventId} {
      allow read: if false;
      allow write: if false;
    }
  }
}
